# handpicked list of clang-tidy checks by Manuel Saladin (Coding Assistant FS24).
# tried to keep the checks light by avoiding ones that don't propose easy fixes (except for egregious warnings)
# and by mostly avoiding the strict cpp core guidelines checks (they're good but hard to add to existing codebases)
# see https://clang.llvm.org/extra/clang-tidy/checks/list.html for a full list of checks
Checks: '
    boost-use-string,
    bugprone-argument-comment,
    bugprone-assignment-in-if-condition,
    bugprone-bool-pointer-implicit-conversion,
    bugprone-casting-through-void,
    bugprone-chained-comparison,
    bugprone-compare-pointer-to-member-virtual-function,
    bugprone-copy-constructor-init,
    bugprone-dangling-handle,
    bugprone-empty-catch,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-inaccurate-erase,
    bugprone-inc-dec-in-conditions,
    bugprone-infinite-loop,
    bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    bugprone-macro-repeated-side-effects,
    bugprone-move-forwarding-reference,
    bugprone-multi-level-implicit-pointer-conversion,
    bugprone-multiple-new-in-one-expression,
    bugprone-multiple-statement-macro,
    bugprone-non-zero-enum-to-bool-conversion,
    bugprone-not-null-terminated-result,
    bugprone-optional-value-conversion,
    bugprone-parent-virtual-call,
    bugprone-redundant-branch-condition,
    bugprone-reserved-identifier,
    bugprone-shared-ptr-array-mismatch,
    bugprone-sizeof-container,
    bugprone-standalone-empty,
    bugprone-string-constructor,
    bugprone-string-integer-assignment,
    bugprone-string-literal-with-embedded-nul,
    bugprone-stringview-nullptr,
    bugprone-suspicious-include,
    bugprone-suspicious-semicolon,
    bugprone-swapped-arguments,
    bugprone-switch-missing-default-case,
    bugprone-terminating-continue,
    bugprone-throw-keyword-missing,
    bugprone-too-small-loop-variable,
    bugprone-unique-ptr-array-mismatch,
    bugprone-unused-local-non-trivial-variable,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    cppcoreguidelines-prefer-member-initializer,
    cppcoreguidelines-pro-type-static-cast-downcast,
    misc-redundant-expression,
    misc-static-assert,
    misc-unused-using-decls,
    readability-container-contains,
    readability-const-return-type,
    readability-container-data-pointer,
    readability-container-size-empty,
    readability-delete-null-pointer,
    readability-duplicate-include,
    readability-else-after-return,
    readability-enum-initial-value,
    readability-inconsistent-declaration-parameter-name,
    readability-make-member-function-const,
    readability-math-missing-parentheses,
    readability-non-const-parameter,
    readability-redundant-access-specifiers,
    readability-redundant-declaration,
    readability-redundant-function-ptr-dereference,
    readability-redundant-inline-specifier,
    readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-string-compare,
    readability-use-std-min-max,
    -clang-analyzer-security.FloatLoopCounter
    -clang-analyzer-optin.portability.UnixAPI
    -clang-analyzer-unix.Malloc
    '
# exclusions of some clang-analyzer checks are
# due to them causing unavoidable warnings (esp. with Eigen)

WarningsAsErrors: '*' # treat all warnings as errors
HeaderFilterRegex: '(include|developers)/.*\.h$' # tells clang-tidy which header files should have unsupressed warnings (ony ours)
FormatStyle: file # format from .clang-tidy file
UseColor: true
ExtraArgs: ['-DEIGEN_INTERNAL_DEBUGGING'] # was there before, unsure what it does
CheckOptions: []  # empty for now